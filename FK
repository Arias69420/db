#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int value;
    int weight;
};

// Function to perform fractional knapsack
float fractionalKnapsack(int capacity, struct Item arr[], int no_items) {
    // Sorting items based on value-to-weight ratio in descending order
    for (int i = 0; i < no_items; i++) {
        for (int j = i + 1; j < no_items; j++) {
            if ((float)arr[i].value / arr[i].weight < (float)arr[j].value / arr[j].weight) {
                struct Item temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }

    float valueKnapsack = 0.0; // Final value in knapsack

    // Loop through all items
    for (int i = 0; i < no_items; i++) {
        // If adding the entire item doesn't exceed capacity, add it
        if (arr[i].weight <= capacity) {
            printf("Added object id %d (%d, %d) completely in the bag.\n", i + 1, arr[i].value, arr[i].weight);
            capacity -= arr[i].weight;
            valueKnapsack += arr[i].value;
        } else { // Add fraction of item if it doesn't fit completely
            float fraction = (float)capacity / arr[i].weight;
            printf("Added %.2f%% (%d, %d) of object %d in the bag.\n", fraction * 100, arr[i].value, arr[i].weight, i + 1);
            valueKnapsack += (float)arr[i].value * capacity / arr[i].weight;
            break;
        }
    }

    return valueKnapsack; // Return final value of the knapsack
}

int main() {
    int capacity, no_items;
    printf("Enter the capacity of knapsack:\n");
    scanf("%d", &capacity);

    printf("Enter the number of items:\n");
    scanf("%d", &no_items);

    struct Item *arr = (struct Item *)malloc(no_items * sizeof(struct Item));

    printf("Enter the Weight and Value of each item:\n");
    for (int i = 0; i < no_items; i++) {
        printf("Weight[%d]:\t", i + 1);
        scanf("%d", &arr[i].weight);
        printf("Value[%d]:\t", i + 1);
        scanf("%d", &arr[i].value);
    }

    // Call fractional knapsack function
    float ans = fractionalKnapsack(capacity, arr, no_items);
    printf("The maximum value of the knapsack is: %.2f\n", ans);

    free(arr); // Free dynamically allocated memory
    return 0;
}

Corrected code of Fractional Knapsack
