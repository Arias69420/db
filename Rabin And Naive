RABIN

#include <stdio.h>
#include <string.h>

#define d 256
#define q 101

void search(char pat[], char txt[]) {
    int M = strlen(pat);
    int N = strlen(txt);
    int i, j;
    int p = 0;
    int t = 0;
    int h = 1;

    for (i = 0; i < M - 1; i++)
        h = (h * d) % q;

    for (i = 0; i < M; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }

    for (i = 0; i <= N - M; i++) {
        if (p == t) {
            for (j = 0; j < M; j++) {
                if (txt[i + j] != pat[j])
                    break;
            }
            if (j == M)
                printf("Pattern found at index %d\n", i);
        }
        if (i < N - M) {
            t = (d * (t - txt[i] * h) + txt[i + M]) % q;
            if (t < 0)
                t = (t + q);
        }
    }
}

int main() {
    char txt[100], pat[100];
    printf("Enter the text: ");
    scanf("%s", txt);
    printf("Enter the pattern: ");
    scanf("%s", pat);
    search(pat, txt);
    return 0;
}

Naive String Matching Algorithm

#include <stdio.h>
#include <string.h>

int main() {
    char txt[1000];
    char pat[100];
    
    printf("Enter the text: ");
    fgets(txt, sizeof(txt), stdin);
    printf("Enter the pattern: ");
    fgets(pat, sizeof(pat), stdin);

    int M = strlen(pat) - 1;
    int N = strlen(txt) - 1;

    for (int i = 0; i <= N - M; i++) {
        int j;
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
        if (j == M)
            printf("Pattern matches at index %d\n", i);
    }
    return 0;
}
