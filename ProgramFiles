1) Create the following table and perform the necessary commands given below :
(a) Create Table Student with following attributes:

1.) Roll_No
2.) Name
3.) Date_of_Birth
4.) Branch
5.) Semester
6.) Address
7.) Year_of _Admission

(b) Enter at least 10 records in the above table and answer the following queries using SQL :
i.) Find the name of all the students who are enrolled in EXTC branch and having date of birth as
01/01/2008
ii.) List the name and roll number of all the students who are enrolled in year 2015.
iii.)List the name and address of all the students who are currently in fifth semester for Computer
department
iv.)Retrieve total number of students enrolled in IT department

ans 

a)CREATE TABLE Student (
    Roll_No INT PRIMARY KEY,
    Name VARCHAR(50),
    Date_of_Birth DATE,
    Branch VARCHAR(50),
    Semester INT,
    Address VARCHAR(100),
    Year_of_Admission INT
);

b) INSERT INTO Student (Roll_No, Name, Date_of_Birth, Branch, Semester, Address, Year_of_Admission) VALUES
(1, 'John Doe', '2000-05-15', 'Computer Science', 3, '123 Main St, Cityville', 2022),
(2, 'Jane Smith', '2001-08-20', 'Electrical Engineering', 2, '456 Elm St, Townsville', 2023),
(3, 'Alice Johnson', '1999-12-10', 'Mechanical Engineering', 4, '789 Oak St, Villageton', 2021),
(4, 'Bob Anderson', '2002-03-25', 'Civil Engineering', 1, '101 Pine St, Hamlet', 2024),
(5, 'Emily Wilson', '2000-07-05', 'Chemical Engineering', 2, '222 Cedar St, Riverside', 2023),
(6, 'Michael Brown', '2001-01-30', 'Computer Science', 4, '333 Maple St, Hillside', 2021),
(7, 'Sarah Lee', '1999-09-12', 'Electrical Engineering', 3, '444 Birch St, Lakeside', 2022),
(8, 'David Martinez', '2000-11-18', 'Mechanical Engineering', 1, '555 Fir St, Mountainside', 2024),
(9, 'Laura Garcia', '2002-06-08', 'Civil Engineering', 2, '666 Willow St, Oceanside', 2023),
(10, 'Kevin Nguyen', '2001-04-03', 'Chemical Engineering', 3, '777 Spruce St, Woodside', 2022);

b.i) SELECT Name
FROM Student
WHERE Branch = 'Computer Science' AND Date_of_Birth = '2008-01-01';

b.ii) SELECT Roll_No, Name
FROM Student
WHERE Year_of_Admission = 2015;

Biii) SELECT Name, Address
FROM Student
WHERE Branch = 'Computer Science' AND Semester = 5;

Biv) SELECT COUNT(*)
FROM Student
WHERE Branch = 'IT';

2) Write a query in SQL to create a table employee and department.
Employee(empno,ename,deptno,job,hiredate)
Department(deptno,dname,loc)
A. Include the following constraints on column of Employee table.
i) make empno as primary key of the table
ii) ename attribute does not contain NULL values
iii) job attribute allow only UPPERCASE entries
iv) put the current date as default date in hire date column in case data is not supplied for the
column.
B. Include the following constraints on column of dept table.
i) make deptno as primary key.
ii) dname,loc attributes does not contain NULL values
iii)enforce REFERENTIAL INTEGRITY where deptno attribute of dept table as primary key
and deptno attribute of emp table as foreign key.
iv) put default value ofloc as “Mumbai”

       a) CREATE TABLE Department (
    deptno INT PRIMARY KEY,
    dname VARCHAR(50),
    loc VARCHAR(50)
);

CREATE TABLE Employee (
    empno INT PRIMARY KEY,
    ename VARCHAR(50) NOT NULL,
    deptno INT,
    job VARCHAR(50) CHECK (job = LOWER(job)),
    hiredate DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (deptno) REFERENCES Department(deptno)
);
  
b) CREATE TABLE Department (
    deptno INT PRIMARY KEY,
    dname VARCHAR(50) NOT NULL,
    loc VARCHAR(50) DEFAULT 'Mumbai' NOT NULL
);

CREATE TABLE Employee (
    empno INT PRIMARY KEY,
    ename VARCHAR(50) NOT NULL,
    deptno INT,
    job VARCHAR(50) CHECK (job = LOWER(job)),
    hiredate DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (deptno) REFERENCES Department(deptno)
);

3) Write a query in SQL to create a table employee and department with following attributes.
Employee(empno,ename,deptno,job,hiredate)
Department(deptno,dname,loc)
1. Give list of emp name & their job spec who are working in dept no 20?
2. Retrieve the details of emp working in dept no 30 ?
3. Find list of emp whose empno is greater then manager no ?
4. Find all manager not working in dept no 10 ?
5. To find the total number of employees.

1ans) SELECT ename, job
FROM Employee
WHERE deptno = 20;


2ans) SELECT *
FROM Employee
WHERE deptno = 30;

3ans) SELECT e.*
FROM Employee e
JOIN Employee m ON e.empno > m.empno
AND e.deptno = m.deptno;

4ans) SELECT *
FROM Employee
WHERE job = 'Manager' AND deptno != 10;

5ans) SELECT COUNT(*)
FROM Employee;




4) Write a query in sql to create a table employee and department.
Employee(empno,ename,deptno,job,hiredate)
Department(deptno,dname,loc)
1. To find the total number of clerk hired after 13-Jan-2001.
2. Determine which department having more than two people holding a same job?
3. Find all departments that have at least two clerks?
4. Retrieve emp name and job who have the same job as that of „Allen‟?
5. List all emp name and their job of those department that are located at Chicago?


1ans) SELECT COUNT(*)
FROM Employee
WHERE job = 'Clerk' AND hiredate > '2001-01-13';

2ans) SELECT deptno, job, COUNT(*) AS num_employees
FROM Employee
GROUP BY deptno, job
HAVING COUNT(*) > 2;

3ans) SELECT deptno
FROM Employee
WHERE job = 'Clerk'
GROUP BY deptno
HAVING COUNT(*) >= 2;

4ans)  SELECT e2.ename, e2.job
FROM Employee e1
JOIN Employee e2 ON e1.job = e2.job
WHERE e1.ename = 'Allen';

5ans) SELECT e.ename, e.job
FROM Employee e
JOIN Department d ON e.deptno = d.deptno
WHERE d.loc = 'Chicago';

5) Write a query in sql to create a table employee and department.
Employee(empno,ename,deptno,job,hiredate,salary)
Department(deptno,dname,loc)
1. To get all employees working for dept 10 and 20.
2. To list all employees whose name begins with „J‟.
3. Retrieve all details of employees whose name is either Smith, Blake, Allen, Scott, Clark and King ?
4. Create view on appropriate tables to display ename , job , salary , dept name?
5. Drop the above view

1ans) SELECT *
FROM Employee
WHERE deptno IN (10, 20);

2ans) SELECT *
FROM Employee
WHERE ename LIKE 'J%';

3ans) SELECT *
FROM Employee
WHERE ename IN ('Smith', 'Blake', 'Allen', 'Scott', 'Clark', 'King');

4ans) CREATE VIEW EmployeeDetails AS
SELECT e.ename, e.job, e.salary, d.dname AS dept_name
FROM Employee e
JOIN Department d ON e.deptno = d.deptno;

5ans) DROP VIEW IF EXISTS EmployeeDetails;





6) Write a query in sql to create a table employee and department.
Employee(empno,ename,deptno,job,hiredate,salary)
Department(deptno,dname,loc)
1. To select the employees whose salary is greater than the salary of all employees working in dept no. 30
2. To list all employees in the ascending order by name.
3. To select all employees sorted dept wise in ascending order and within dept salary wise in descending
order.
4. To select all employees working in location whose name is starting with L
5. To find the minimum salary of managers in various depts.


1ans) SELECT *
FROM Employee
WHERE salary > (SELECT MAX(salary) FROM Employee WHERE deptno = 30);

2ans) SELECT *
FROM Employee
ORDER BY ename ASC;

3ans) SELECT *
FROM Employee
ORDER BY deptno ASC, salary DESC;

4ans) SELECT *
FROM Employee e
JOIN Department d ON e.deptno = d.deptno
WHERE d.loc LIKE 'L%';

5ans) SELECT deptno, MIN(salary) AS min_manager_salary
FROM Employee
WHERE job = 'Manager'
GROUP BY deptno;

9) Create table employee with following attributes and insert 10 record (Apply following query)
Employee(empno,ename,deptno,job,hiredate,salary)
Department(deptno,dname,loc)
1. To list employees whose name begins with „J‟ and has „N‟ as the third character?
2. To list all employees not entitled for commission.
3. To get all the employees whose salary is greater than the average salary of the company.
4. To find out average minimum and maximum salary of each dept.
5. Create view on emp to display sum of salary grouped according to deptno

-- Create Employee table
CREATE TABLE Employee (
    empno INT PRIMARY KEY,
    ename VARCHAR(50),
    deptno INT,
    job VARCHAR(50),
    hiredate DATE,
    salary DECIMAL(10, 2)
);

-- Create Department table
CREATE TABLE Department (
    deptno INT PRIMARY KEY,
    dname VARCHAR(50),
    loc VARCHAR(50)
);

-- Insert 10 records into the Employee table
INSERT INTO Employee (empno, ename, deptno, job, hiredate, salary) VALUES
(1, 'John', 10, 'Manager', '2023-01-10', 50000.00),
(2, 'Jane', 20, 'Salesperson', '2022-03-15', 40000.00),
(3, 'Jack', 10, 'Clerk', '2021-05-20', 30000.00),
(4, 'Jill', 30, 'Manager', '2022-07-25', 55000.00),
(5, 'James', 20, 'Analyst', '2023-02-01', 45000.00),
(6, 'Jennifer', 20, 'Salesperson', '2021-09-05', 38000.00),
(7, 'Jason', 30, 'Clerk', '2022-11-10', 32000.00),
(8, 'Jessica', 10, 'Manager', '2022-04-15', 52000.00),
(9, 'Justin', 30, 'Analyst', '2023-03-20', 47000.00),
(10, 'Julia', 20, 'Clerk', '2021-08-30', 34000.00);

1ans) SELECT *
FROM Employee
WHERE ename LIKE 'JN%';

2ans) SELECT *
FROM Employee
WHERE job != 'Salesperson';

3ans) SELECT *
FROM Employee
WHERE salary > (SELECT AVG(salary) FROM Employee);

4ans) SELECT deptno, AVG(salary) AS avg_salary, MIN(salary) AS min_salary, MAX(salary) AS max_salary
FROM Employee
GROUP BY deptno;

5ans) CREATE VIEW DepartmentSalary AS
SELECT deptno, SUM(salary) AS total_salary
FROM Employee
GROUP BY deptno;

10) Consider the following schema:
Suppliers(sid: integer, sname: string, address: string)
Parts(pid: integer, pname: string, color: string)
Catalog(sid: integer, pid: integer, cost: real)
The Catalog relation lists the prices charged for parts by Suppliers.
Write the following queries in SQL:
1. For each part, find the sname of the supplier who charges the most for that part.
2. Find the sids of suppliers who supply only red parts.
3. Find the sids of suppliers who supply a red part and a green part.
4. Find the snames of suppliers who supply every red part.
5. Find the pnames of parts supplied by Acme Widget Suppliers and no one else.

1ans) SELECT p.pname, s.sname
FROM Parts p
JOIN Catalog c ON p.pid = c.pid
JOIN Suppliers s ON c.sid = s.sid
WHERE c.cost = (SELECT MAX(cost) FROM Catalog WHERE pid = p.pid);

2ans) SELECT DISTINCT sid
FROM Catalog
WHERE pid IN (SELECT pid FROM Parts WHERE color = 'red')
  AND sid NOT IN (SELECT sid FROM Catalog WHERE pid IN (SELECT pid FROM Parts WHERE color <> 'red'));

3ans) SELECT sid
FROM Catalog
WHERE pid IN (SELECT pid FROM Parts WHERE color = 'red')
INTERSECT
SELECT sid
FROM Catalog
WHERE pid IN (SELECT pid FROM Parts WHERE color = 'green');

4ans) SELECT s.sname
FROM Suppliers s
WHERE NOT EXISTS (
    SELECT pid FROM Parts WHERE color = 'red'
    EXCEPT
    SELECT pid FROM Catalog WHERE sid = s.sid
);





5ans) SELECT DISTINCT pname
FROM Parts
WHERE pid IN (
    SELECT pid
    FROM Catalog
    WHERE sid = (SELECT sid FROM Suppliers WHERE sname = 'Acme Widget Suppliers')
)
AND pid NOT IN (
    SELECT pid
    FROM Catalog
    WHERE sid <> (SELECT sid FROM Suppliers WHERE sname = 'Acme Widget Suppliers')
);

11) Create a table customer(acc_no, cust_name, avail_balance)
Create table mini_statement(acc_no, avail_balance)
Insert into customer following records:
Customer(1000, “Fanny”, 7000);
Customer(1001,”Peter”, 12000);
Write a trigger to insert old values into mini_statement table(including acc_no, avail_balance as parameters)
before updating any record in customer table

ans) -- Create customer table
CREATE TABLE customer (
    acc_no INT PRIMARY KEY,
    cust_name VARCHAR(50),
    avail_balance DECIMAL(10, 2)
);

-- Create mini_statement table
CREATE TABLE mini_statement (
    acc_no INT,
    avail_balance DECIMAL(10, 2)
);

-- Insert records into customer table
INSERT INTO customer (acc_no, cust_name, avail_balance) VALUES
(1000, 'Fanny', 7000),
(1001, 'Peter', 12000);

-- Create trigger to insert old values into mini_statement table before updating customer table
CREATE TRIGGER before_customer_update
BEFORE UPDATE ON customer
FOR EACH ROW
BEGIN
    INSERT INTO mini_statement (acc_no, avail_balance) VALUES (OLD.acc_no, OLD.avail_balance);
END;

12) Create a table customer(acc_no, cust_name, avail_balance)
Create table micro_statement(acc_no, avail_balance)
Insert following record in table customer:
Customer(1000, “Fanny”, 7000);
Customer(1001,”Peter”, 12000);
Customer(1002,”Janitor”, 4500)
Write a trigger to insert new values of acc_no and avail_balance in micro_statement after an update has
Occurred


-- Create customer table
CREATE TABLE customer (
    acc_no INT PRIMARY KEY,
    cust_name VARCHAR(50),
    avail_balance DECIMAL(10, 2)
);

-- Create micro_statement table
CREATE TABLE micro_statement (
    acc_no INT,
    avail_balance DECIMAL(10, 2)
);

-- Insert records into customer table
INSERT INTO customer (acc_no, cust_name, avail_balance) VALUES
(1000, 'Fanny', 7000),
(1001, 'Peter', 12000),
(1002, 'Janitor', 4500);

-- Create trigger to insert new values into micro_statement table after an update
CREATE TRIGGER after_customer_update
AFTER UPDATE ON customer
FOR EACH ROW
BEGIN
    INSERT INTO micro_statement (acc_no, avail_balance) VALUES (NEW.acc_no, NEW.avail_balance);
END;


13) Create a table customer (cust_id, cust_name, balance) and insert 3 records to it
Write a transaction which update the balance of all 3 customers and using TCL Commands(Commit, Rollback
and Savepoint) show the changes made to actual records

ans) CREATE TABLE customer (
    cust_id INT PRIMARY KEY,
    cust_name VARCHAR(50),
    balance DECIMAL(10, 2)
);

INSERT INTO customer (cust_id, cust_name, balance) VALUES
(1, 'Alice', 5000.00),
(2, 'Bob', 7000.00),
(3, 'Charlie', 6000.00);

BEGIN; -- Start transaction

-- Update balances
UPDATE customer SET balance = balance + 1000 WHERE cust_id = 1; -- Alice
UPDATE customer SET balance = balance - 500 WHERE cust_id = 2;  -- Bob
UPDATE customer SET balance = balance + 1500 WHERE cust_id = 3; -- Charlie

-- Show changes
SELECT * FROM customer;

-- Savepoint
SAVEPOINT changes_made;

-- ROLLBACK to the savepoint
ROLLBACK TO changes_made;

-- Show original records
SELECT * FROM customer;

-- Commit the transaction
COMMIT;

14) Create a table student (student_id, stud_name, percentage) and insert 3 records to it
Write a transaction which update the percentage of all 3 students and using TCL Commands(Commit, Rollback
and Savepoint) show the changes made to actual records

ans) CREATE TABLE student (
    student_id INT PRIMARY KEY,
    stud_name VARCHAR(50),
    percentage DECIMAL(5, 2)
);

INSERT INTO student (student_id, stud_name, percentage) VALUES
(1, 'Alice', 85.00),
(2, 'Bob', 78.50),
(3, 'Charlie', 92.00);

BEGIN; -- Start transaction

-- Update percentages
UPDATE student SET percentage = percentage + 5 WHERE student_id = 1; -- Alice
UPDATE student SET percentage = percentage - 3 WHERE student_id = 2; -- Bob
UPDATE student SET percentage = percentage + 2 WHERE student_id = 3; -- Charlie

-- Show changes
SELECT * FROM student;

-- Savepoint
SAVEPOINT changes_made;

-- ROLLBACK to the savepoint
ROLLBACK TO changes_made;

-- Show original records
SELECT * FROM student;

-- Commit the transaction
COMMIT;


15) Consider the relational database. Write an expression in SQL for following schema
employee(employee-name, street, city)
works(employee-name, company-name, salary)
company(company-name, city)
manages(employee-name,manager-name)
Write following SQL queries
i) Retrieve details of all employees working for “Infosys” company
ii) Retrieve employee-name in uppercase for all employees
iii) Replace existing company name of employees from Infosys to TCS
iv) Retrieve manager name along with employee name working for “TCS” company
v) Retrieve details of all employees whose ename starts with “P”

ansi) SELECT e.employee_name, e.street, e.city
FROM employee e
INNER JOIN works w ON e.employee_name = w.employee_name
INNER JOIN company c ON w.company_name = c.company_name
WHERE c.company_name = 'Infosys';

ansii) SELECT UPPER(employee_name) AS employee_name_uppercase
FROM employee;

ansiii) UPDATE works
SET company_name = 'TCS'
WHERE company_name = 'Infosys';

ansiv) SELECT e.employee_name, m.manager_name
FROM employee e
INNER JOIN manages m ON e.employee_name = m.employee_name
INNER JOIN works w ON e.employee_name = w.employee_name
INNER JOIN company c ON w.company_name = c.company_name
WHERE c.company_name = 'TCS';

ansv) SELECT *
FROM employee
WHERE employee_name LIKE 'P%';








16) Consider an online bookstore database with the following tables:
• books: Contains information about books such as book_id, title, author_id, genre_id, and price.
• authors: Contains information about authors such as author_id, author_name, and country.
• genres: Contains information about book genres such as genre_id and genre_name.
• customers: Contains information about customers such as customer_id, name, email, and city.
• orders: Contains information about orders such as order_id, customer_id, order_date, and total_amount.
• order_details: Contains information about the details of each order such as order_detail_id, order_id,
book_id, quantity, and subtotal.
1. Get the list of books with their authors and genres
2. Get the total amount spent by each customer:
3. Get the list of customers along with the titles of books they have ordered
4. Get the top-selling authors (authors with the highest total number of book sales)

Ans1) SELECT b.title AS book_title, a.author_name, g.genre_name
FROM books b
INNER JOIN authors a ON b.author_id = a.author_id
INNER JOIN genres g ON b.genre_id = g.genre_id;

Ans2) SELECT c.customer_id, c.name AS customer_name, SUM(o.total_amount) AS total_spent
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;

Ans3) SELECT c.customer_id, c.name AS customer_name, GROUP_CONCAT(b.title) AS ordered_books
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN books b ON od.book_id = b.book_id
GROUP BY c.customer_id, c.name;

Ans4) SELECT a.author_id, a.author_name, COUNT(*) AS total_sales
FROM authors a
INNER JOIN books b ON a.author_id = b.author_id
INNER JOIN order_details od ON b.book_id = od.book_id
GROUP BY a.author_id, a.author_name
ORDER BY total_sales DESC;

17) We have a database for an online bookstore with relations books and customer, and we want to grant
specific privileges to different users.
• Create a new user named 'bookstore_manager' with a password.
• Grant the SELECT privilege on the 'books' table to the 'bookstore_manager' user, allowing them to
retrieve data from the 'books' table.
• Grant the INSERT, UPDATE, and DELETE privileges on the 'customers' table to the
'bookstore_manager' user, allowing them to insert, update, and delete records in the 'customers' table.

Ans1) CREATE USER 'bookstore_manager'@'localhost' IDENTIFIED BY 'password';

Ans2) GRANT SELECT ON bookstore.books TO 'bookstore_manager'@'localhost';

Ans3) GRANT INSERT, UPDATE, DELETE ON bookstore.customers TO 'bookstore_manager'@'localhost'; 


18) Let's consider a scenario where a customer places an order on our online bookstore. We want to ensure that
the order process is treated as a single transaction. Apply TCL commands using following steps
• We begin a transaction using the BEGIN TRANSACTION command.
• We insert the order details (such as customer ID, order date, and total amount) into the 'orders' table.
• We insert the individual items of the order (book ID, quantity, and subtotal) into the 'order_details' table.
• We perform a check to ensure that the total amount matches the sum of individual subtotals. If the
validation fails, we rollback the transaction using the ROLLBACK command.
• If the validation succeeds, we commit the transaction using the COMMIT command.

Ans)
-- Step 1: Begin a transaction
BEGIN TRANSACTION;

-- Step 2: Insert order details into 'orders' table
INSERT INTO orders (customer_id, order_date, total_amount)
VALUES (1234, '2024-04-18', 150.00);

-- Step 3: Insert order items into 'order_details' table
INSERT INTO order_details (order_id, book_id, quantity, subtotal)
VALUES (LAST_INSERT_ID(), 1001, 2, 50.00),
       (LAST_INSERT_ID(), 1002, 1, 100.00);

-- Step 4: Perform validation
DECLARE @total_amount DECIMAL(10, 2);
DECLARE @calculated_total DECIMAL(10, 2);

SELECT @total_amount = total_amount FROM orders WHERE order_id = LAST_INSERT_ID();
SELECT @calculated_total = SUM(subtotal) FROM order_details WHERE order_id = LAST_INSERT_ID();

IF @total_amount <> @calculated_total THEN
    -- Validation failed, rollback the transaction
    ROLLBACK;
    PRINT 'Validation failed! Rolling back transaction.';
ELSE
    -- Validation succeeded, commit the transaction
    COMMIT;
    PRINT 'Transaction committed successfully.';
END IF;
