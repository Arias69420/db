1) Insertion Sort

#include <stdio.h>

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        
        /* Move elements of arr[0..i-1], that are greater than key,
           to one position ahead of their current position */
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    
    int arr[n];
    
    printf("Enter the elements: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    insertionSort(arr, n);
    
    printf("Array after sorting: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    
    return 0;
}

2) Selection Sort 

#include <stdio.h>
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
void selectionSort(int arr[], int n)
{
    int i, j, min_index;
    for (i = 0; i < n-1; i++)
    {
        min_index = i;
        for (j=i+1; j < n; j++)
        {
        if (arr[j] < arr[min_index])
        {
        min_index = j;
        }
        }
    swap(&arr[min_index], &arr[i]);
    }
}

int main()
{
    int n,arr[n];
    printf("Enter no of Elements: ");
    scanf("%d",&n);
    printf("Enter the elements: \n");
    for(int i=0; i<n; i++)
    {
        scanf("%d",&arr[i]);
    }
    selectionSort(arr,n);
    printf("Array after sorting: \n");
    for(int i=0; i<n; i++)
    {
        printf("%d ",arr[i]);
    }
}

3) Merge Sort

#include <stdio.h>
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}
int main() {
    int arr_size;

    printf("Enter the size of the array: ");
    scanf("%d", &arr_size);

    int arr[arr_size];

    printf("Enter %d elements:\n", arr_size);
    for (int i = 0; i < arr_size; i++)
        scanf("%d", &arr[i]);

    printf("Given array is \n");
    for (int i = 0; i < arr_size; i++)
        printf("%d ", arr[i]);
    printf("\n");

    mergeSort(arr, 0, arr_size - 1);

    printf("Sorted array is \n");
    for (int i = 0; i < arr_size; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}

4) Quick Sort 

#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int a[], int low, int high) {
    int pivot = a[low];
    int i = low + 1, j;
    for (j = low + 1; j <= high; j++) {
        if (a[j] < pivot) {
            swap(&a[j], &a[i]);
            i++;
        }
    }
    swap(&a[i - 1], &a[low]);
    return i - 1;
}

void quick_sort(int a[], int low, int high) {
    if (low < high) {
        int pi = partition(a, low, high);
        quick_sort(a, low, pi - 1);
        quick_sort(a, pi + 1, high);
    }
}

int main() {
    int n, i, j, key, count = 0;
    scanf("%d", &n);
    int arr[n];
    printf("Enter array elements: ");
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    quick_sort(arr, 0, n - 1);
    printf("Sorted Array: ");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
}

5) Maximum And Minimum using DAC approach

#include<stdio.h>

int max, min;
int a[100];

void maxmin(int i, int j) {
    int mid;

    if (i == j) {
        max = min = a[i];
    } else {
        if (j == i + 1) {
            if (a[i] < a[j]) {
                max = a[j];
                min = a[i];
            } else {
                max = a[i];
                min = a[j];
            }
        } else {
            mid = (i + j) / 2;
            maxmin(i, mid);
            int max1 = max, min1 = min;
            maxmin(mid + 1, j);
            if (max < max1)
                max = max1;
            if (min > min1)
                min = min1;
        }
    }
}

int main() {
    int i, num;
    printf("\nEnter the total number of numbers: ");
    scanf("%d", &num);
    printf("Enter the numbers: \n");
    for (i = 0; i < num; i++)
        scanf("%d", &a[i]);
    max = min = 0;
    maxmin(0, num - 1);
    printf("Maximum number is : %d\n", max);
    printf("Minimum number is : %d\n", min);
    return 0;
}

6) Binary Search 

#include <stdio.h>

int binary_search(int arr[], int n, int target) {
    int left = 0;
    int right = n - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    
    return -1;
}

int main() {
    int n, target;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter the sorted array elements: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    
    printf("Enter the target element to search: ");
    scanf("%d", &target);
    
    int result = binary_search(arr, n, target);
    
    if (result != -1)
        printf("Element found at index %d.\n", result);
    else
        printf("Element not found.\n");
    
    return 0;
}

7) Prims Algorithm

#include<stdio.h>

int main() {
    int a, b, u, v, n, i, j, ne = 1;
    int visited[10] = {0}, min, mincost = 0, cost[10][10]; 
    
    printf("\nEnter the number of nodes:");
    scanf("%d", &n);
    
    printf("\nEnter the adjacency matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if(cost[i][j] == 0)
                cost[i][j] = 999;
        }
    }
    
    visited[1] = 1;
    printf("\n");
    
    while(ne < n) {
        min = 999;
        
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                if(cost[i][j] < min) {
                    if(visited[i] != 0) {
                        min = cost[i][j];
                        a = u = i;
                        b = v = j;
                    }
                }
            }
        }
        
        if(visited[u] == 0 || visited[v] == 0) {
            printf("\nEdge %d: (%d %d) cost: %d", ne++, a, b, min);
            mincost += min;
            visited[b] = 1;
        }
        
        cost[a][b] = cost[b][a] = 999;
    }
    
    printf("\nMinimum cost = %d\n", mincost);
    
    return 0;
}

8) Kruskal Algorithm

#include <stdio.h>

#define MAX 30

typedef struct edge {
    int u, v, w;
} edge;

typedef struct edge_list {
    edge data[MAX];
    int n;
} edge_list;

edge_list elist;
int Graph[MAX][MAX], n;
edge_list spanlist;

void kruskalAlgo();
int find(int belongs[], int vertexno);
void applyUnion(int belongs[], int c1, int c2);
void sort();
void print();

void kruskalAlgo() {
    int belongs[MAX], i, j, cno1, cno2;
    elist.n = 0;

    for (i = 1; i < n; i++)
        for (j = 0; j < i; j++) {
            if (Graph[i][j] != 0) {
                elist.data[elist.n].u = i;
                elist.data[elist.n].v = j;
                elist.data[elist.n].w = Graph[i][j];
                elist.n++;
            }
        }

    sort();

    for (i = 0; i < n; i++)
        belongs[i] = i;

    spanlist.n = 0;

    for (i = 0; i < elist.n; i++) {
        cno1 = find(belongs, elist.data[i].u);
        cno2 = find(belongs, elist.data[i].v);

        if (cno1 != cno2) {
            spanlist.data[spanlist.n] = elist.data[i];
            spanlist.n = spanlist.n + 1;
            applyUnion(belongs, cno1, cno2);
        }
    }
}

int find(int belongs[], int vertexno) {
    return (belongs[vertexno]);
}

void applyUnion(int belongs[], int c1, int c2) {
    int i;

    for (i = 0; i < n; i++)
        if (belongs[i] == c2)
            belongs[i] = c1;
}

void sort() {
    int i, j;
    edge temp;

    for (i = 1; i < elist.n; i++)
        for (j = 0; j < elist.n - 1; j++)
            if (elist.data[j].w > elist.data[j + 1].w) {
                temp = elist.data[j];
                elist.data[j] = elist.data[j + 1];
                elist.data[j + 1] = temp;
            }
}

void print() {
    int i, cost = 0;

    for (i = 0; i < spanlist.n; i++) {
        printf("\n%d - %d : %d", spanlist.data[i].u, spanlist.data[i].v, spanlist.data[i].w);
        cost = cost + spanlist.data[i].w;
    }

    printf("\nSpanning tree cost: %d\n", cost);
}

int main() {
    int i, j, total_cost;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &Graph[i][j]);

    kruskalAlgo();
    print();

    return 0;
}

9) Job Sequencing with Deadline using Greedy Approach

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct Jobs {
   char id;
   int dead;
   int profit;
} Jobs;

int compare(const void* a, const void* b){
   Jobs* temp1 = (Jobs*)a;
   Jobs* temp2 = (Jobs*)b;
   return (temp2->profit - temp1->profit);
}

int min(int num1, int num2){
   return (num1 > num2) ? num2 : num1;
}

int main(){
   int numJobs;
   printf("Enter the number of jobs: ");
   scanf("%d", &numJobs);

   Jobs *arr = (Jobs*)malloc(numJobs * sizeof(Jobs));
   if (arr == NULL) {
      printf("Memory allocation failed\n");
      return 1;
   }

   printf("Enter details for each job (id, deadline, profit):\n");
   for (int i = 0; i < numJobs; i++) {
      printf("Job %d: ", i + 1);
      scanf(" %c %d %d", &arr[i].id, &arr[i].dead, &arr[i].profit);
   }

   printf("Following is maximum profit sequence of Jobs: \n");
   qsort(arr, numJobs, sizeof(Jobs), compare);

   int result[numJobs];
   bool slot[numJobs];

   for (int i = 0; i < numJobs; i++)
      slot[i] = false;

   for (int i = 0; i < numJobs; i++) {
      for (int j = min(numJobs, arr[i].dead) - 1; j >= 0; j--) {
         if (slot[j] == false) {
            result[j] = i;
            slot[j] = true;
            break;
         }
      }
   }

   for (int i = 0; i < numJobs; i++)
      if (slot[i])
         printf("%c ", arr[result[i]].id);

   free(arr);
   return 0;
}

10) Fractional Knapsack using Greedy Approach

#include <stdio.h>

void main() {
    int capacity, no_items, cur_weight = 0, item;
    int used[10];
    float total_profit = 0.0;
    int i;
    int weight[10];
    int value[10];

    printf("Enter the capacity of knapsack:\n");
    scanf("%d", &capacity);

    printf("Enter the number of items:\n");
    scanf("%d", &no_items);

    printf("Enter the Weight and Value of the item:\n");
    for (i = 0; i < no_items; i++) {
        printf("Weight[%d]:\t", i + 1);
        scanf("%d", &weight[i]);
        printf("Value[%d]:\t", i + 1);
        scanf("%d", &value[i]);
    }

    for (i = 0; i < no_items; ++i)
        used[i] = 0;

    while (cur_weight < capacity) {
        item = -1;
        for (i = 0; i < no_items; ++i) {
            if (!used[i] && (item == -1 || ((float)value[i] / weight[i] > (float)value[item] / weight[item])))
                item = i;
        }

        if (cur_weight + weight[item] <= capacity) {
            used[item] = 1;
            cur_weight += weight[item];
            total_profit += value[item];
            printf("Added object id (%d %d) completely in the bag. Space left: %d\n", item, value[item], weight[item], capacity - cur_weight);
        } else {
            int item_percent = (int)(((float)cur_weight / weight[item]) * 100);
            total_profit += ((float)cur_weight / weight[item]) * value[item];
            printf("Added %d%% (%d, %d) of object %d in the bag.\n", item_percent, value[item], weight[item], item + 1);
            cur_weight = capacity;  // Stop the loop
        }
    }

    printf("Filled the bag with objects worth %.2f\n", total_profit);
}

11) All pair shortest using Dynamic Approach

#include <stdio.h>

int min(int a, int b) {
    if (a > b) {
        return b;
    } else {
        return a;
    }
}

int main() {
    int n;
    printf("Enter the size of the matrix: ");
    scanf("%d", &n);
    
    int A[n][n];
    
    printf("Enter the elements of the matrix:\n(Enter 99 if there is no path)\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }
    
    // Print initial matrix
    printf("\nInitial matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", A[i][j]);
        }
        printf("\n");
    }
    
    // Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        printf("\nIteration %d:\n", k+1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = min(A[i][j], A[i][k] + A[k][j]);
                printf("%d\t", A[i][j]); // Print intermediate step
            }
            printf("\n");
        }
    }
    
    // Print final result
    printf("\nAll pair shortest paths are:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", A[i][j]);
        }
        printf("\n");
    }
    
    return 0;
} 

12)Longest Common Subsequence

#include <stdio.h>
#include <string.h>
 
int i, j, m, n, c[20][20];
char x[20], y[20], b[20][20];
 
void print(int i, int j) {
    if (i == 0 || j == 0)
        return;
    if (b[i][j] == 'c') {
        print(i - 1, j - 1);
        printf("%c", x[i - 1]);
    } else if (b[i][j] == 'u')
        print(i - 1, j);
    else
        print(i, j - 1);
}
 
void lcs() {
    m = strlen(x);
    n = strlen(y);
    for (i = 0; i <= m; i++)
        c[i][0] = 0;
    for (i = 0; i <= n; i++)
        c[0][i] = 0;
                                
    for (i = 1; i <= m; i++)
        for (j = 1; j <= n; j++) {
            if (x[i - 1] == y[j - 1]) {
                c[i][j] = c[i - 1][j - 1] + 1;
                b[i][j] = 'c';
            } else if (c[i - 1][j] >= c[i][j - 1]) {
                c[i][j] = c[i - 1][j];
                b[i][j] = 'u';
            } else {
                c[i][j] = c[i][j - 1];
                b[i][j] = 'l';
            }
        }
}

int main() {
    printf("Enter 1st sequence:");
    scanf("%s", x);
    printf("Enter 2nd sequence:");
    scanf("%s", y);
    printf("\nThe Longest Common Subsequence is ");
    lcs();
    print(m, n);
    return 0;
}


13) N Queen using backtracking

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int N;

void printSolution(int **board) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", board[i][j]);
        printf("\n");
    }
}

bool isSafe(int **board, int row, int col) {
    int i, j;
    // Check left side of this row
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;
    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;
    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;
    return true;
}

bool solveNQUtil(int **board, int col) {
    if (col >= N)
        return true;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;
            if (solveNQUtil(board, col + 1))
                return true;
            board[i][col] = 0; // Backtrack
        }
    }
    return false;
}

bool solveNQ() {
    int **board = (int **)malloc(N * sizeof(int *));
    if (board == NULL) {
        printf("Memory allocation failed.\n");
        return false;
    }
    for (int i = 0; i < N; i++) {
        board[i] = (int *)malloc(N * sizeof(int));
        if (board[i] == NULL) {
            printf("Memory allocation failed.\n");
            return false;
        }
        for (int j = 0; j < N; j++)
            board[i][j] = 0;
    }

    if (solveNQUtil(board, 0) == false) {
        printf("Solution does not exist\n");
        return false;
    }
    printSolution(board);
    return true;
}

int main() {
    printf("Enter the number of queens: ");
    scanf("%d", &N);
    if (N <= 0) {
        printf("Invalid input. Please enter a positive number.\n");
        return 1;
    }
    solveNQ();
    return 0;
}

14) Sum of Subsets using Backtracking

#include <stdio.h>
#define MAX 100

int subset[MAX];
int n, sum;

void subset_sum(int s, int k, int r, int arr[]) {
    int i;
    subset[k] = 1;
    if (s + arr[k] == sum) {
        printf("{ ");
        for (i = 0; i <= k; i++) {
            if (subset[i] == 1)
                printf("%d ", arr[i]);
        }
        printf("}\n");
    } else if (s + arr[k] + 1 <= sum) {
        subset_sum(s + arr[k], k + 1, r - arr[k], arr);
    }
    if ((s + r - arr[k] >= sum) && (s + arr[k] + 1 <= sum)) {
        subset[k] = 0;
        subset_sum(s, k + 1, r - arr[k], arr);
    }
}

int main() {
    int i;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Enter the desired sum: ");
    scanf("%d", &sum);
    int total = 0;
    for (i = 0; i < n; i++) {
        total += arr[i];
    }
    if (total < sum) {
        printf("No subset with sum equal to %d\n", sum);
        return 0;
    }
    printf("The subsets with sum equal to %d are:\n", sum);
    subset_sum(0, 0, total, arr);
    return 0;
}

15) Rabin Karp Algo

#include <stdio.h>
#include <string.h>

#define d 256
#define q 101

void search(char pat[], char txt[]) {
    int M = strlen(pat);
    int N = strlen(txt);
    int i, j;
    int p = 0;
    int t = 0;
    int h = 1;

    for (i = 0; i < M - 1; i++)
        h = (h * d) % q;

    for (i = 0; i < M; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }

    for (i = 0; i <= N - M; i++) {
        if (p == t) {
            for (j = 0; j < M; j++) {
                if (txt[i + j] != pat[j])
                    break;
            }
            if (j == M)
                printf("Pattern found at index %d\n", i);
        }
        if (i < N - M) {
            t = (d * (t - txt[i] * h) + txt[i + M]) % q;
            if (t < 0)
                t = (t + q);
        }
    }
}

int main() {
    char txt[100], pat[100];
    printf("Enter the text: ");
    scanf("%s", txt);
    printf("Enter the pattern: ");
    scanf("%s", pat);
    search(pat, txt);
    return 0;
}

16) Naive String Matching Algorithm

#include <stdio.h>
#include <string.h>

int main() {
    char txt[1000];
    char pat[100];
    
    printf("Enter the text: ");
    fgets(txt, sizeof(txt), stdin);
    printf("Enter the pattern: ");
    fgets(pat, sizeof(pat), stdin);

    int M = strlen(pat) - 1;
    int N = strlen(txt) - 1;

    for (int i = 0; i <= N - M; i++) {
        int j;
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
        if (j == M)
            printf("Pattern matches at index %d\n", i);
    }
    return 0;
}
